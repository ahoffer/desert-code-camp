# -----------------------------------------------------------------------------
# Cryptographic things we'll need:
#   RSA key pair (private key and public key)
#   X509 certificate signing request (CSR)
#       CSR associates descriptive information with the public key
#   X509 certificate
#       When a Certificate Authority signs a CSR, you have a trusted X509 Certificate
#       We will create an untrusted X509 Certificate, called a self-signed certificate
#       Because our certificate is self-signed, the browser will warn us that the web services are untrusted
#   Keychain. A password-protected file that associates our X509 Certificate with our RSA private key
#       We wil use a keychain format called PKCS12 (extension .p12). There are other formates like Java Key Store (JKS)
# -----------------------------------------------------------------------------
#  Use Java's keytool utilities to create the key pair, CSR, certificate, and keychain in one go:
#       keytool -genkey -alias codecamp -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650 -storepass "changeit"
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# Investigate what is in our keystore:
#       keytool -list -keystore keystore.p12 -storepass "changeit"
# -----------------------------------------------------------------------------
# Just for fun, lets export the certificate and examine it:
#       keytool -export -alias codecamp -file codecamp.crt -keystore keystore.p12 -storepass "changeit"
#       keytool -printcert -rfc -file codecamp.crt
# -----------------------------------------------------------------------------
# The keychain entry contains a private key as well as a certificate.
#       openssl pkcs12 -in keystore.p12  -nodes -nocerts  -passin pass:changeit
# -----------------------------------------------------------------------------



